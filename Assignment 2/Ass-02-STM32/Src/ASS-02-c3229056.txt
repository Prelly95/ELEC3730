//     $Date: 2017-04-04 04:00:13 +1000 (Tue, 04 Apr 2017) $
// $Revision: 872 $
//   $Author: Peter $

#include "Ass-02.h"

//
// PLACE YOUR COMMON CODE HERE
//

// STEPIEN: Added two touch panel functions to make the interface more
//          consistent with the LCD BSP.

uint8_t BSP_TP_Init(void)
{
  // Initialise the interface and calibrate
  TP_Init(); // This is an empty function since done by STM32CubeMX
  TouchPanel_Calibrate();

  return 0;
}

uint8_t BSP_TP_GetDisplayPoint(Coordinate *pDisplay)
{
  Coordinate *pScreen;

  pScreen = Read_Ads7846();
  if (pScreen == NULL)
  {
    return 1; // Error reading the touch panel
  }
  if (getDisplayPoint(pDisplay, pScreen, &matrix ) == DISABLE)
  {
    return 1; // Error in LCD
  }
  return 0;
}
//     $Date: 2017-04-04 04:00:13 +1000 (Tue, 04 Apr 2017) $
// $Revision: 872 $
//   $Author: Peter $

#include "Ass-02.h"
#include "usart.h"
//
// REPLACE THE EXAMPLE CODE WITH YOUR CODE
//Initialise the Command List using the Structure type of command_s

volatile uint8_t Debug = 0;

const command_s CommandList[] = {
		{(int8_t *)"add", &Add_Function, (int8_t *)"add <num_1> +...+ <num_n>"},
		{(int8_t *)"sub", &Sub_Function,(int8_t *) "sub <num_1> -...- <num_n>"},
		{(int8_t *)"mul", &Mul_Function, (int8_t *)"mul <num_1> *...* <num_n>"},
		{(int8_t *)"div", &Div_Function,(int8_t *) "div <num_1> /<num_2>"},
		{(int8_t *)"help", &Help_Function, (int8_t *)"help [command]: Prints help information for a command"},
		{(int8_t *)"debug", &Debug_Function, (int8_t *)"debug <on|off>"},
		{(int8_t *)"clear", &Clear_Function, (int8_t *)"clears the terminal window"},
		{(int8_t *)"clc", &Clear_Function, (int8_t *)"clears the terminal window"},
		{NULL, NULL, NULL}
};

/*
 * Function: Add_Function
 * ----------------------------
 *   Returns the Add of all the arguments passed into the function
 *
 *	ArgNum = number of arguments expected for calculation
 *	*ArgString[] = array of pointers to the start of the argument words
 *
 */
int8_t Clear_Function(uint8_t ArgNum, uint8_t *ArgStrings[]){
	//printf("IN the Clear function\n\r");
	printf("\014");
	printf("ELEC3730 Assignment 2\n\r");
	return -1;

}




/*
 * Function: Add_Function
 * ----------------------------
 *   Returns the Add of all the arguments passed into the function
 *
 *	ArgNum = number of arguments expected for calculation
 *	*ArgString[] = array of pointers to the start of the argument words
 *
 */
int8_t Add_Function(uint8_t ArgNum, uint8_t *ArgStrings[]){
	float result=0;
	uint8_t i;
	//printf("IN the ADD function\n\r");
	if(ArgNum > 2){
		for(i = 1; i<ArgNum; i++){
			//Convert the input the string to a float and add to result
			result += atof((char*)ArgStrings[i]);
		}
		printf("Result = %f\n\r",result);
	}
	else{
		//No enough arguments have been entered
		printf("Not enough arguments have been entered for the add function,\n\renter 'add help' for help\n\r");
	}

	return -1;

}


/*
 * Function: Sub_Function
 * ----------------------------
  *	Calculates the Subtraction between String A - String B  - ...- String N
 *
 *	Returns -1
 *
 *	INPUTS:
 *	ArgNum =number of arguments expected for calculation
 *	*ArgString[] = array of pointers to the start of the argument words
 *
 */
int8_t Sub_Function(uint8_t ArgNum, uint8_t *ArgStrings[]){
	float result =0;
	uint8_t i;
	//printf("IN the Sub function\n\r");
	if(ArgNum > 2){
		//Checks correct number of arguments have been entered
		result = atof((char*)ArgStrings[1]);
		for(i = 2; i<ArgNum; i++){
			result = result - atof((char*)ArgStrings[i]);
		}
		printf("Result = %f\n\r",result);
	}
	else{
		printf("Not enough arguments have been entered for the sub function,\n\renter 'help sub' for help\n\r");
	}

	return -1;

}

/*
 * Function: Mul_Function
 * ----------------------------
 *	Calculates the Multiplication between String A * String B  * ...* String N
 *	Returns -1
 *
 *	INPUTS:
 *	ArgNum =number of arguments expected for calculation
 *	*ArgString[] = array of pointers to the start of the argument words
 *
 */
int8_t Mul_Function(uint8_t ArgNum, uint8_t *ArgStrings[]){
	float result =1;
	int8_t ERR = 0;
	uint8_t i, j;
	//printf("IN the Mul function\n\r");
	if(ArgNum>2){
		for(i=1; i<ArgNum; i++){
			result *= atof((char*)ArgStrings[i]);
			j = 0;
			while(ArgStrings[i][j] != '\0')
			{
				//printf("arg %i\n\r", ArgStrings[i][j]);
				if(ArgStrings[i][j] < 48 || ArgStrings[i][j] > 57)
				{
					printf("ERROR: Opperator Expects number in arg %i\n\r", i);
					printf("Interpreted Value: %g\n\r", atof((char*)ArgStrings[i]));
					ERR = 1;
					break;
				}
				j++;
			}
		}
		if(ERR == 1)
		{
			printf("Possible Result from interpreted arguments : %g\n\r",result);
			ERR = 0;
		}
		else
		{
			printf("Result : %g\n\r",result);
		}
	}
	else{
		printf("Not enough arguments entered for the mul function,\n\r enter 'help mul' for help\n\r");
	}

	return -1;
}






/*
 * Function: Div_Function
 * ----------------------------
 *	Calculates the Division of String A and String B
 *	Returns -1
 *
 *	INPUTS:
 *	ArgNum =number of arguments expected for calculation
 *	*ArgString[] = array of pointers to the start of the argument words
 *
 */
int8_t Div_Function(uint8_t ArgNum, uint8_t *ArgStrings[]){
	float result;
	//printf("IN the Div function\n\r");
	uint8_t i,j;
	int8_t ERR = 0;
	if(ArgNum>3){
		//To many arguments have been entered
		printf("Too many arguments have been entered for the divide operator,\n\r type 'help div' for help\n\r");
	}
	if(ArgNum>2){ //Correct number of arguments have been entered for the divide function
		for(i=1; i<ArgNum; i++){
			j = 0;
			//Loop through each input string until NULL terminator is reached
			while(ArgStrings[i][j] != '\0')
			{
				//Check each character in the string is a ASCII CODE for a number
				if(ArgStrings[i][j] < 48 || ArgStrings[i][j] > 57)
				{
					//Character in the string was found to contain a Number character ASCII value
					//Report error and break out of loop
					printf("ERROR: Opperator Expects number in arg %i\n\r", i);
					printf("Interpreted Value: %g\n\r", atof((char*)ArgStrings[i]));
					ERR = 1;
					break;
				}
				j++;
			}
			//Do the calculaion
			result = atof((char*)ArgStrings[1])/atof((char*)ArgStrings[2]);
		}
		if(ERR == 1)
		{
			printf("Possible Result from interpreted arguments : %g\n\r",result);
			ERR = 0;
		}
		else
		{
			printf("Result : %g\n\r",result);
		}
	}
	else{
		//Not enough arguements have been entered
		printf("Not enough arguments entered for the mul function,\n\r enter 'help mul' for help\n\r");
	}
	return -1;

}

/*
 * Function: Help_Function
 * ----------------------------
 *   Prints out the help description of a specific function,
 *   or the entire list of possible commands in the command line interface
 *
 *	 ArgNum =number of arguments expected for calculation
 *	 *ArgString[] = array of pointers to the start of the argument words
 *
 */
int8_t Help_Function(uint8_t ArgNum, uint8_t *ArgStrings[]){
	uint8_t j,i;
	//printf("IN the Help function\n\r");
	if(ArgNum == 1){
		printf("\tCommand\tHelp\n\r");
		//Steps through all of the Commands
		for(i = 0; CommandList[i].NameString != 0;i++){
			printf("\t%s\t%s\n\r",CommandList[i].NameString,CommandList[i].HelpString);
		}
	}
	else{
		//Loop through all the arguments and print there corresponding help strings
		for(i=1; i<ArgNum;i++){
			//Loop through all the functions and find which function string matches the entered input string
			for(j=0;CommandList[j].NameString != NULL; j++){
				if(strcasecmp((char *)ArgStrings[i],(char *) CommandList[j].NameString) == 0){
					printf("%s\n\r",(char *) CommandList[j].HelpString);
				}
			}
		}

	}

	return -1;
}


/*
 * Function:Debug_Function
 * ----------------------------
 *   Prints out the help description of a specific function
 *  Returns: Debug_State ==1 ON// Debug_State == 0 OFF
 *
 *  Inputs:
 *	ArgNum =number of arguments expected for calculation
 *	*ArgString[] = array of pointers to the start of the argument words
 *
 */
int8_t Debug_Function(uint8_t ArgNum, uint8_t *ArgStrings[]){
	//Check that only 2 arguments are entered
	if(ArgNum >2){
		printf("Too many arguments entered for the debug function,\r\ntype 'help debug' for help\r\n");
	}
	else if(ArgNum>1){
		//Correct amount of arguments have been entered, determine which state to toggle too
		//Check the input String, to determine which State to toggle Debug_State to
		if(strcasecmp((char *)ArgStrings[1],"On")==0){
			printf("Debug has been turned on\n\r");
			Debug = 1;
		}
		else if(strcmp((char *)ArgStrings[1],"SENSUAL")==0){
			printf("GEEEET RICKITY REEEEEKKKED\n\r");
			Debug = 2;
		}
		else if(strcasecmp((char *)ArgStrings[1],"Off")==0){
			printf("Debug has been turned off\n\r");
			Debug = 0;
		}
		else{
			printf("Input argument has not been found,\r\ntype 'help debug' for help\r\n");

		}
	}
	else{
		printf("Not enough arguments have been entered for the debug function,\r\ntype 'help debug' for help\r\n");
	}

	return -1;
}


void CommandLineParserInit(void)
{
  // Print welcome message
  printf("\014");
  printf("ELEC3730 Assignment 2\n\r");
  printf("Command Line Parser Example\n\r");

}



/*
 * Function: CommandLineParserProcess
 * ----------------------------
 *  Returns void
 *
 *	This function is used to implement the command line interface, when called it fist check to see if the uartReceive buffer has data if so
 *	it will check to see if it is a character or enter value then leave the function.
 *	If it was a enter value, this means a command and arguments has been entered and further action should be take.
 *
 *
 */
void CommandLineParserProcess(void)
{
  uint8_t c; //Holds the current input from the uartBuffer, awaiting for further process
  static uint8_t ArrOfChars[MAXBUFF]; //Holds the complete string of input from the serial communication
  static uint8_t i = 0; //Used to increment how many times a user has interface with the command line up until a enter command
  uint8_t j, count; //Variables used to evaluate the command line input
  uint8_t **array_of_words_pp; //Pointer to a array which holds pointers to strings

  // Check for input and echo back
  if (HAL_UART_Receive(&huart2, &c, 1, 0x0) == HAL_OK)
  {
	//Echo to PUTTY and toggle LED
    printf("%c", c);
    HAL_GPIO_TogglePin(GPIOD, LD4_Pin); // Toggle LED4

    //Check that the current input Character isn't enter and that the bufferlimit hasnt been exceeded
    if(c != 13 && i<100){
    	//All conditions are fine
    	ArrOfChars[i]= c; //Load the character into the input string if not enter
    	i++; //increment the counter
    }
    else{
    	//Either Overflow of data or Enter was pressed
    	if(i == 100){
    		//Overflow has occured, continue process with this string size
    		printf("\nError to many characters entered in command line\n\r");
    	}
    	//Proceed and terminate string with a null character
    	ArrOfChars[i]='\0';
    	i = 0; //start from beginning again
    	printf("\nThe input string was '%s'\n\r",ArrOfChars);

    	//Now handle the input string and print the results
    	count = string_parser(ArrOfChars, &array_of_words_pp);
    	//Print the number of arguments entered
    	printf("--> count = %d\r\n", count);
		if(count != 0){
			//Print out the individual words if arguments entered is larger than 0
    		for (j=0;j<count;j++)
			{
			  printf("---> %2d: '%s'\r\n", j+1, (array_of_words_pp)[j]);
			}

    		//**********************************************************************//
    		//Find out which command was entered and do calculation
        	for(j=0;  CommandList[j].NameString != NULL; j++){
    			if(strcasecmp((char *)array_of_words_pp[0],(char *) CommandList[j].NameString) == 0){
        			//Now do the correct operation based on the match
        			(*CommandList[j].Function_p)(count, array_of_words_pp);
    			}
        	}
		}
		else{
			//Let the user know that they must input commands
			printf("No arguments where entered, type 'list' for commands list,\n\ror 'help command' for specific functions\n\r");
		}
		//Free mememory after the calculation process has occured
    	if (count != 0)
       	{
       	  free(array_of_words_pp[0]);
       	  free(array_of_words_pp);
       	}
    }

  }
}



uint8_t string_parser(uint8_t *inp, uint8_t **array_of_words[])
{
	uint16_t i, j;
	uint8_t *string_copy;
	uint8_t word_count = 0;
	uint8_t flag= 0; //Determines if a Char has been encountered yet in a string

	//printf("function() '%17s'\n",inp);
	//printf("function() Address of array_of_words = %u and value stored in it =%u \n", (uint32_t)array_of_words,(uint32_t)*array_of_words);
	//Copy the string across
	string_copy = malloc(sizeof(uint8_t)*(strlen((const char*)inp)+1));
	strcpy((char *)string_copy,(char *)inp);
	//printf("Address of the start of the copied string = %u\n", (uint32_t)&string_copy);
	//printf("\tCopied string = '%s'\n", string_copy);
	//Find out the word count
	i = 0;
	while(*(inp+i) != '\0'){
		if( (*(inp+i) !=' ') && (*(inp+i) != '\0')){
			if(flag == 0){
				word_count++;
				flag = 1;
			}
		}
		else{
			flag = 0;
		}
		i++;
	}
	//printf("\tNumber of words = %d\n", word_count);
	*array_of_words = malloc(sizeof(char *)*word_count); //Allocate the pointers array

	//Go through the copied string and place a null in the space locations and assing the first word location to array of words
	i=0;
	j =0;
	while(*(string_copy+i) != '\0'){
		if(*(string_copy+i) == ' '){
			//Equal to a space so place a '\0'
			*(string_copy+i)= '\0';
			i++;
		}
		else{
			//Start of the word has been hit
			//printf("Address of first letter word = %u\t Character= %c\n",(uint32_t)&string_copy[i],string_copy[i]);
			(*array_of_words)[j] = &string_copy[i];
			j++;
			while((*(string_copy+i) != ' ' )&& (*(string_copy+i) != '\0' )){
				//Go through till end of the current word
				i++;
			}
		}
	}

	return word_count;
}











//     $Date: 2017-04-04 04:00:13 +1000 (Tue, 04 Apr 2017) $
// $Revision: 872 $
//   $Author: Peter $

#include "Ass-02.h"

//
// REPLACE THE EXAMPLE CODE WITH YOUR CODE
//



//*************Button Definitions*************
//Defines the struct index for each opperator button
#define PLUSMINUS 11
#define Modulus 12
#define Addition 13
#define Multiplication 14
#define Equals 15
#define Clear 16
#define Subtraction 17
#define Division 18
#define All_Clear 19
#define OPP 20
#define Result 21

//Button Structure initilization
const button_s ButtonList[] = {
		//Buttons
		{(uint8_t *)"0",	{0,		64,		192, 	240},	(uint8_t *)&Font24,	LCD_COLOR_CUSTOMGRAY, LCD_COLOR_GRAY,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_0},
		{(uint8_t *)"1",	{0,		64,		144,	192},	(uint8_t *)&Font24,	LCD_COLOR_CUSTOMGRAY, LCD_COLOR_GRAY,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_0},
		{(uint8_t *)"2",	{64,	128,	144,	192},	(uint8_t *)&Font24,	LCD_COLOR_CUSTOMGRAY, LCD_COLOR_GRAY,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_0},
		{(uint8_t *)"3",	{128,	192,	144,	192},	(uint8_t *)&Font24,	LCD_COLOR_CUSTOMGRAY, LCD_COLOR_GRAY,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_0},
		{(uint8_t *)"4",	{0,		64,		96,		144},	(uint8_t *)&Font24,	LCD_COLOR_CUSTOMGRAY, LCD_COLOR_GRAY,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_0},
		{(uint8_t *)"5",	{64,	128,	96,		144},	(uint8_t *)&Font24,	LCD_COLOR_CUSTOMGRAY, LCD_COLOR_GRAY,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_0},
		{(uint8_t *)"6",	{128,	192,	96,		144},	(uint8_t *)&Font24,	LCD_COLOR_CUSTOMGRAY, LCD_COLOR_GRAY,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_0},
		{(uint8_t *)"7",	{0,		64,		48,		96},	(uint8_t *)&Font24,	LCD_COLOR_CUSTOMGRAY, LCD_COLOR_GRAY,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_0},
		{(uint8_t *)"8",	{64,	128,	48,		96},	(uint8_t *)&Font24,	LCD_COLOR_CUSTOMGRAY, LCD_COLOR_GRAY,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_0},
		{(uint8_t *)"9",	{128,	192,	48,		96},	(uint8_t *)&Font24,	LCD_COLOR_CUSTOMGRAY, LCD_COLOR_GRAY,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_0},
		{(uint8_t *)".",	{64,	128,	192,	240},	(uint8_t *)&Font24,	LCD_COLOR_CUSTOMGRAY, LCD_COLOR_GRAY,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_0},

		//Operators
		{(uint8_t *)"+/-",	{128,	192,	192,	240},	(uint8_t *)&Font24,	LCD_COLOR_CUSTOMGRAY,	LCD_COLOR_GRAY,			  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_0},
		{(uint8_t *)"MOD",	{192,	256,	144,	192},	(uint8_t *)&Font24,	LCD_COLOR_ORANGE, 		LCD_COLOR_CUSTOMORANGE ,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_Mod},
		{(uint8_t *)"+",	{192,	256,	96,		144},	(uint8_t *)&Font24,	LCD_COLOR_ORANGE, 		LCD_COLOR_CUSTOMORANGE ,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_Add},
		{(uint8_t *)"X",	{192,	256,	48,		96},	(uint8_t *)&Font24,	LCD_COLOR_ORANGE, 		LCD_COLOR_CUSTOMORANGE ,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_Mul},
		{(uint8_t *)"=",	{192,	256,	192,	240},	(uint8_t *)&Font24,	LCD_COLOR_ORANGE, 		LCD_COLOR_CUSTOMORANGE ,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_0},
		{(uint8_t *)"C",	{256,	320,	144,	192},	(uint8_t *)&Font24,	LCD_COLOR_ORANGE, 		LCD_COLOR_CUSTOMORANGE ,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12}, &Calc_0},
		{(uint8_t *)"-",	{256,	320,	96,		144},	(uint8_t *)&Font24,	LCD_COLOR_ORANGE, 		LCD_COLOR_CUSTOMORANGE ,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12}, &Calc_Sub},
		{(uint8_t *)"/",	{256,	320,	48,		96},	(uint8_t *)&Font24,	LCD_COLOR_ORANGE, 		LCD_COLOR_CUSTOMORANGE ,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12}, &Calc_Div},
		{(uint8_t *)"AC",	{256,	320,	192,	240},	(uint8_t *)&Font24,	LCD_COLOR_ORANGE, 		LCD_COLOR_CUSTOMORANGE ,  LCD_COLOR_BLACK,	CENTER_MODE,	{0, 12},	&Calc_0},

		//Result Field
		{(uint8_t *)"Opp",	{0,		64,	0,		48},		(uint8_t *)&Font24,	LCD_COLOR_BLACK,  LCD_COLOR_BLACK,  LCD_COLOR_WHITE,	CENTER_MODE,	{-32, 12},	&Calc_0},
		{(uint8_t *)"Res",	{64,	320,	0,		48},	(uint8_t *)&Font24,	LCD_COLOR_BLACK,  LCD_COLOR_BLACK,  LCD_COLOR_WHITE,	RIGHT_MODE,	{-120, 12},	&Calc_0},

		//Terminator
		{NULL,	{0,		0,		0,		0},		NULL,	(int32_t)NULL,	(int32_t)NULL,	(int32_t)NULL,	(Line_ModeTypdef)NULL,	{0, 0}, NULL}
};

/*
 * Function: Calc_0
 * ----------------------------
 *   Returns float = 0
 *
 * Function that returns 0 and changes nothing
 *
 *
 */
float Calc_0(uint8_t *arg1, uint8_t *arg2)
{
	return 0;
};


/*
 *
 * Function: Calc_Mod
 * ----------------------------
 *   Returns int8_t
 *
 * Function executed for Modulous opperation
 * Returns arg1 % arg 2
 *
 */
float Calc_Mod(uint8_t *arg1, uint8_t *arg2)
{
	uint8_t a, b;
	a = atof((char*)arg1);
	b = atof((char*)arg2);
	 return a%b;
};

/*
 *
 * Function: Calc_Add
 * ----------------------------
 *   Returns int8_t
 *
 * Function executed for Addition opperation
 * Returns arg1 + arg2
 *
 */
float Calc_Add(uint8_t *arg1, uint8_t *arg2)
{
	float a, b;
	a = atof((char*)arg1);
	b = atof((char*)arg2);
	return a+b;
};

/*
 *
 * Function: Calc_Sub
 * ----------------------------
 *   Returns int8_t
 *
 * Function executed for Subtraction opperation
 * Returns arg1 - arg2
 *
 */
float Calc_Sub(uint8_t *arg1, uint8_t *arg2)
{
	float a, b;
	a = atof((char*)arg1);
	b = atof((char*)arg2);
	return a - b;
};

/*
 *
 * Function: Calc_Mul
 * ----------------------------
 *   Returns int8_t
 *
 * Function executed for Multiplication opperation
 * Returns arg1 x arg2
 *
 */
float Calc_Mul(uint8_t *arg1, uint8_t *arg2)
{
	float a, b;
	a = atof((char*)arg1);
	b = atof((char*)arg2);
	return a * b;
};

/*
 *
 * Function: Calc_Div
 * ----------------------------
 *   Returns int8_t
 *
 * Function executed for Division opperation
 * Returns arg1 / arg2
 *
 */
float Calc_Div(uint8_t *arg1, uint8_t *arg2)
{

	float a, b;
	a = atof((char*)arg1);
	b = atof((char*)arg2);
	return a / b;
};

/*
 *
 * Function: CalculatorInit
 * ----------------------------
 *   Returns NOTHING
 *
 * Function Initializes The calculator screen ready for use
 *
 *
 */
void CalculatorInit(void)
{
  uint8_t i;
  uint16_t a = 10000;
  // Initialize and turn on LCD and calibrate the touch panel
  BSP_LCD_Init();
  BSP_LCD_DisplayOn();
  BSP_TP_Init();
  BSP_LCD_Clear(LCD_COLOR_BLACK);

	//Display Welcome Message to avoid a false press from calabration
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
	BSP_LCD_SetFont((sFONT*)&Font24);
	BSP_LCD_DisplayStringAt(160, 120, (uint8_t *)"TOUCH ME ;)", CENTER_MODE);//change to location of button
	while(a > 0)
	{
		while(BSP_TP_GetDisplayPoint(&display) == 0)
		{
			a = 1000;//while the touch screen is being pressed it never leaves the for loop
		}
		a--;
	}

  //Draw the calculator screen
  for(i=0; ButtonList[i].Character_String != NULL; i++)
	{
	  DrawButton(i,0);
  }
}

/*
 *
 * Function: CalculatorProcess
 * ----------------------------
 *   Returns NOTHING
 *	 Recieves uint8_t Debug_p(Debug status)
 *
 * Function Carries out calculation processes based on touch input
 *
 *
 */
void CalculatorProcess(void)
{
	int8_t Button = -1;
	static uint8_t decFlag =  0;
	static uint8_t preCo = 0;
	static uint8_t val_1[MAXBUFF]; //Stores the second String for calculation
	static uint8_t Calculation[MAXBUFF];
	static uint8_t strCounter = 0;
	static uint8_t Command = -1;
	static uint8_t State =0;
	float Toggle;
	if (BSP_TP_GetDisplayPoint(&display) == 0)
	{
		 Button = FindPress(display.x,display.y);
		 switch(State)
		 {
		 	 case 0://No arguments have been input yet

		 		 if(Button <=10)
				 {
					 //Debugging
			 		 if(Debug == 1)
					 {
						 printf("Button Press: %s\n\r", ButtonList[Button].Character_String);
					 }

		 			 if(decFlag == 1 && Button == 10)
		 			 {
		 				 //Do NOTHING
		 			 }
		 			 else if(Button == 10)
		 			 {
		 				 decFlag = 1;
						 //if number is pressed update argument 1
						 val_1[strCounter] = ButtonList[Button].Character_String[0];
						 Print_To_Screen(val_1, Result);//*function* print in result pannel
						 strCounter++;
		 			 }
		 			 else
		 			 {
						 //if number is pressed update argument 1
						 val_1[strCounter] = ButtonList[Button].Character_String[0];
						 Print_To_Screen(val_1, Result);//*function* print in result pannel
						 strCounter++;
		 			 }
		 			State = 0; // remain in arg1 update case
				 }
				 else if(Button >= 11 && Button < 20)
				 {
					 //Debugging
			 		 if(Debug == 1)
					 {
						 printf("Button Press: %s\n\r", ButtonList[Button].Character_String);
					 }

					 if(Button != PLUSMINUS)
					 {
						 decFlag = 0;
					 }
					//Can only leave State 0 if a operator is pressed (X / + - %) and Arguments have been entered in val_1
					 if(strCounter != 0 && Button != Equals && Button != All_Clear && Button != Clear && Button != PLUSMINUS){

					 //Terimate the input string with a null and reset the counter before leaving
						 //Debugging
				 		 if(Debug == 1)
						 {
				 			 printf("Case 0: Operator has been pressed\n\r");
						 }
						 val_1[strCounter] = '\0';
						 strCounter =0;
						 //Update Result Argument before leaving
						 strcpy((char*)Calculation,(char*)val_1);
						 //Value has been copied to Calculation argument, clear the  val_1er
						 Clear_Array(val_1);
						 Command = Button;
						 Print_To_Screen(ButtonList[Command].Character_String, OPP);
						 State = 1;
					 }
					 else if(Button == PLUSMINUS)
					 {
						//Toggle the input String
						 Toggle = -1*atof((char *)val_1);
						 sprintf((char *)val_1, "%g", Toggle);
						 Print_To_Screen(val_1, Result);
						 strCounter++;
						 State = 0;
					 }
					 //No argument has been entered therefore wait before leaving initial state
					else if( Button != All_Clear || Button != Clear){

						strCounter = 0;
						Clear_Array(val_1);
						Print_To_Screen(val_1, Result);
						Clear_Button(OPP);
						decFlag = 0;
						State = 0;
					}
					 //No argument has been entered therefore wait before leaving initial state
					else{
						State = 0;
					}
				 }
				 else//result area was pressed do nothing no button was found
				 {
					 //printf("PRESSED IN RESULT\n\r");//debug
					 State = 0;
				 }
		 		 break;
		 	 case 1://Result holds an argument

				 if(Button < 11)
				 {
					 //Debugging
			 		 if(Debug == 1)
					 {
						 printf("Button Press: %s\n\r", ButtonList[Button].Character_String);
					 }

					 if(preCo == 1)
					 {
						 Clear_Array(val_1);
						 strCounter = 0;
						 preCo = 0;
					 }
					 //if number is pressed update argument 1
					 if(decFlag == 1 && Button == 10)
					 {
						 //do nothing
					 }
					 else if(Button == 10)
					 {
						 val_1[strCounter] = ButtonList[Button].Character_String[0];
						 Print_To_Screen(val_1, Result);//*function* print in result pannel
						 Print_To_Screen(ButtonList[Command].Character_String, OPP);//*function* print in result pannel
						 decFlag = 1;
						 strCounter++;
					 }
					 else
					 {
						 val_1[strCounter] = ButtonList[Button].Character_String[0];
						 Print_To_Screen(val_1, Result);//*function* print in result pannel
						 Print_To_Screen(ButtonList[Command].Character_String, OPP);//*function* print in result pannel
						 strCounter++;
					 }
				 	 State = 1; // remain in arg1 update case
				 }
				 else if(Button >= 11 && Button < 20)
				 {
					 //Debugging
			 		 if(Debug == 1)
					 {
						 printf("Button Press: %s\n\r", ButtonList[Button].Character_String);
					 }

					 if(Button != PLUSMINUS)
					 {
						 decFlag = 0;
					 }
						//Can only leave State 1 if a operator is pressed (X / + - %) and Arguments have been entered in val_1
						 if(strCounter != 0 && Button != Equals && Button != All_Clear && Button != Clear && Button != PLUSMINUS){
						 //Terimate the input string with a null and reset the counter before leaving
							 //Debugging
					 		 if(Debug == 1)
							 {
					 			 printf("Case 1: Operator has been pressed\n\r");
							 }
							 val_1[strCounter] = '\0';
							 strCounter =0;
							 //Update Result Before updating commmand
							 //Calculation completed
							 if(preCo == 0){ //do a normal calculation
								 //Debugging
						 		 if(Debug == 1)
								 {
						 			printf("%s %s %s = ",Calculation,ButtonList[Command].Character_String, val_1);
								 }

								 sprintf((char *)Calculation, "%g", (float)(*ButtonList[Command].Opperation_p)(Calculation, val_1));

								 //Debugging
						 		 if(Debug == 1)
								 {
									 printf("%s\n\r", Calculation);
								 }
							 }
							 else{
								//Because we are coming back from the repeated equals operator, dont do another calculation but clear string instead
								Clear_Array(val_1);
								strCounter = 0;
								preCo = 0; //Set the equals flag to zero so next return does a normal calculation
							 }
							 //Update command entered
							 Command = Button;
							 Print_To_Screen(ButtonList[Command].Character_String, OPP);
							 //Clear the previous value
							 Clear_Array(val_1);
							 Print_To_Screen(Calculation, Result);
							 State = 1;
						 }
						 else if(Button == PLUSMINUS)
						 {
							//Toggle the input String
							 Toggle = -1*atof((char *)Calculation);
							 sprintf((char *)Calculation, "%g", Toggle);
							 Print_To_Screen(Calculation, Result);
							 State = 1;
						 }
						 //All_Clear has been pressed
						 else if(Button == Equals){


							 //Debugging
					 		 if(Debug == 1)
							 {
					 			 //Calculation String
					 			 printf("%s %s %s = ",Calculation,ButtonList[Command].Character_String, val_1);
							 }

					 		 //Repeat the previous calculation
							 sprintf((char *)Calculation, "%g", (float)(*ButtonList[Command].Opperation_p)(Calculation, val_1));

							 //Debugging
					 		 if(Debug == 1)
							 {
								 printf("%s\n\r", Calculation);
							 }
							 Print_To_Screen(Calculation, Result);
							 decFlag = 0;
							 preCo = 1;
							 State = 1;
						 }
						else if( Button == All_Clear){

							strCounter = 0;
							Clear_Array(val_1);
							Clear_Array(Calculation);
							Print_To_Screen(val_1, Result);
							Clear_Button(OPP);
							decFlag = 0;
							State = 0;
						}
						//Clear Button have been pressed
						else if(Button == Clear){
							 //Debugging
					 		 if(Debug == 1)
							 {
								 printf("Case 1: Clear has been pressed\n\r");
							 }
							Clear_Array(val_1);
							Print_To_Screen(val_1, Result);
							strCounter = 0;
							decFlag = 0;
							State = 1;
						}
						 //No argument has been entered therefore wait before leaving initial state
						else{
							State = 1;
						}
				 }
				 else//result area was pressed do nothing no button was found
				 {
					State = 1;
				 }
				 break;

			  default:
				 //Do nothing
				 break;
		 }
	}

}



/*//FIXME
 * Function: FindPress
 * ----------------------------
 * Returns int corespinding to button struct index
 *
 *
 *
 *
 */
int8_t FindPress(uint16_t X_Pos, uint16_t Y_Pos){
	uint8_t j, i = 0;
	uint8_t x = 30;

	for(i=0; ButtonList[i].Character_String != NULL; i++){
		if((X_Pos >= ButtonList[i].Loc[0]) && (X_Pos <= ButtonList[i].Loc[1]) && (Y_Pos >= ButtonList[i].Loc[2]) && (Y_Pos <= ButtonList[i].Loc[3]))
		{
			if(Debug == 2)
			{
				Sexy_Draw();
			}
			else
			{
				DrawButton(i,1);
			}

			while(x > 0)
			{
				if(BSP_TP_GetDisplayPoint(&display) == 0)
				{
					x = 30;
				}
				x--;
				//Toggle the pressed button

			}
			break;
		}
	}
	for(j=0; ButtonList[j].Character_String != NULL; j++)
	{
		DrawButton(j,0);
	}
	return i;
}



/*
 * Function: DrawButton
 * ----------------------------
 *   Returns void
 *
 * Draws Button from button_s
 *
 *
 */
void DrawButton(uint8_t DrawButton, uint8_t Toggle){

	//Fill Rectangle
	if(Toggle){
		BSP_LCD_SetTextColor(ButtonList[DrawButton].ToggleColour);
	}
	else{
		BSP_LCD_SetTextColor(ButtonList[DrawButton].BackColour);
	}
	BSP_LCD_FillRect(ButtonList[DrawButton].Loc[0],ButtonList[DrawButton].Loc[2],
			ButtonList[DrawButton].Loc[1]-ButtonList[DrawButton].Loc[0],ButtonList[DrawButton].Loc[3]-ButtonList[DrawButton].Loc[2]);

	//Draw outlines
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	BSP_LCD_DrawRect(ButtonList[DrawButton].Loc[0],ButtonList[DrawButton].Loc[2],
			ButtonList[DrawButton].Loc[1]-ButtonList[DrawButton].Loc[0],ButtonList[DrawButton].Loc[3]-ButtonList[DrawButton].Loc[2]);
	//Print debug message for the location of rectangle center

	//debug

	//printf("Button %s\n\r",ButtonList[DrawButton].Character_String);
	//printf("X center location of button is %d\n\r",(((ButtonList[DrawButton].Loc[1]-ButtonList[DrawButton].Loc[0])/2)+ButtonList[DrawButton].Loc[0]));
	//printf("Y center location of button is %d\n\r",(((ButtonList[DrawButton].Loc[3]-ButtonList[DrawButton].Loc[2])/2)+ButtonList[DrawButton].Loc[2]));


	//Insert String
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);

	if(Toggle){
		BSP_LCD_SetBackColor(ButtonList[DrawButton].ToggleColour);
	}
	else{
		BSP_LCD_SetBackColor(ButtonList[DrawButton].BackColour);
	}

	BSP_LCD_SetFont((sFONT*)ButtonList[DrawButton].Font);
	BSP_LCD_DisplayStringAt((((ButtonList[DrawButton].Loc[1]-ButtonList[DrawButton].Loc[0])/2)+ButtonList[DrawButton].Loc[0]),
			ButtonList[DrawButton].Loc[2]+(0.3*(ButtonList[DrawButton].Loc[3]-ButtonList[DrawButton].Loc[2])),
			ButtonList[DrawButton].Character_String, CENTER_MODE);

}

/*
 *
 * Function: Print_To_Screen
 * ----------------------------
 *   Returns void
 *
 * Prints a string inside a button boundary
 *
 *
 */
void Print_To_Screen(uint8_t *String_p, uint8_t Button)
{
	Clear_Button(Button);
	BSP_LCD_SetTextColor(ButtonList[Button].TextColour);
	BSP_LCD_SetBackColor(ButtonList[Button].BackColour);
	BSP_LCD_SetFont((sFONT *)ButtonList[Button].Font);
	BSP_LCD_DisplayStringAt(ButtonList[Button].Loc[1]+ButtonList[Button].OffSet[0], ButtonList[Button].Loc[2]+ButtonList[Button].OffSet[1],(uint8_t *)String_p,  ButtonList[Button].MODE);//change to location of button
}

/*
 *
 * Function: Clear_Button
 * ----------------------------
 *   Returns void
 *
 * Draws Empty Button on top of previous button to clear
 *
 *
 */
void Clear_Button(uint8_t DrawButton)
{
	BSP_LCD_SetTextColor(ButtonList[DrawButton].BackColour);
	BSP_LCD_FillRect(ButtonList[DrawButton].Loc[0],ButtonList[DrawButton].Loc[2],
				ButtonList[DrawButton].Loc[1]-ButtonList[DrawButton].Loc[0],ButtonList[DrawButton].Loc[3]-ButtonList[DrawButton].Loc[2]);

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	BSP_LCD_DrawRect(ButtonList[DrawButton].Loc[0],ButtonList[DrawButton].Loc[2],
				ButtonList[DrawButton].Loc[1]-ButtonList[DrawButton].Loc[0],ButtonList[DrawButton].Loc[3]-ButtonList[DrawButton].Loc[2]);
}


/*
 * Function: Clear Array
 * ----------------------------
 *   Returns Void
 *
 *		Replaces values in array with all NULL characters
 *
 *
 */
void Clear_Array(uint8_t *Array_p)
{
	uint8_t i;
	for(i =0; i<MAXBUFF;i++){
		Array_p[i]= (uint8_t)'\0';
	}
};
//     $Date: 2017-04-04 04:00:13 +1000 (Tue, 04 Apr 2017) $
// $Revision: 872 $
//   $Author: Peter $

#include "Ass-02.h"

//
// REPLACE THE EXAMPLE CODE WITH YOUR CODE
//



void Ass_02_Main(void)
{
  uint16_t i=0;
//  uint8_t Debug = 0; //Intiailise Debug state as OFF
   // Initialise
  CommandLineParserInit();
  CalculatorInit();

  // Loop indefinitely
  while (1)
  {
    CommandLineParserProcess();
    CalculatorProcess();
    if (i++ > 10000)
    {
      HAL_GPIO_TogglePin(GPIOD, LD3_Pin); // Toggle LED3
      i=0;
    }
  }
}
//     $Date: 2017-04-04 04:00:13 +1000 (Tue, 04 Apr 2017) $
// $Revision: 872 $
//   $Author: Peter $

// Assignment 2 include file

#ifndef ASS_02_H_
#define ASS_02_H_

// Standard includes
#ifdef STM32F407xx
#include "stm32f4xx_hal.h"
#include "openx07v_c_lcd.h"
#include "touch_panel.h"
#else
#include <windows.h>
#endif
#include <stdio.h>
#include <stdint.h>
#include <malloc.h>
#include <string.h>
#include <stdlib.h>

//Data Types
//**************Global Variables*******************************//
#define MAXBUFF 101 //Maximum size of buffer strings
volatile extern uint8_t Debug;


//For question 1
typedef struct{
	int8_t *NameString;
	int8_t (*Function_p)(uint8_t ArgNum, uint8_t *ArgStrings[]);
	int8_t *HelpString;
}command_s;

//********************For question 2****************************//
typedef struct{
	uint8_t *Character_String;
	uint16_t Loc[4];
	uint8_t *Font;
	uint32_t BackColour;
	uint32_t ToggleColour;
	uint32_t TextColour;
	Line_ModeTypdef MODE;
	int8_t OffSet[2];
	float (*Opperation_p)(uint8_t* arg1, uint8_t* arg2);
}button_s;


// Assignment main
extern void Ass_02_Main(void);

//
// REPLACE THE EXAMPLE CODE WITH YOUR CODE
//

// Question 1
extern void CommandLineParserInit(void);
extern void CommandLineParserProcess(void);
//Function from Ass_1 Question 4
extern uint8_t string_parser(uint8_t *inp, uint8_t **array_of_words[]);

//Command Line Calculator Functions
int8_t Add_Function(uint8_t ArgNum, uint8_t *ArgStrings[]);
int8_t Sub_Function(uint8_t ArgNum, uint8_t *ArgStrings[]);
int8_t Mul_Function(uint8_t ArgNum, uint8_t *ArgStrings[]);
int8_t Div_Function(uint8_t ArgNum, uint8_t *ArgStrings[]);
int8_t Help_Function(uint8_t ArgNum, uint8_t *ArgStrings[]);
int8_t Debug_Function(uint8_t ArgNum, uint8_t *ArgStrings[]);
int8_t Clear_Function(uint8_t ArgNum, uint8_t *ArgStrings[]);

// Question 2
extern void CalculatorInit(void);
extern void CalculatorProcess(void);

//LCD Calculator Functions
void DrawButton(uint8_t DrawButton, uint8_t Toggle);
int8_t FindPress(uint16_t X_Pos, uint16_t Y_Pos);
void Print_To_Screen(uint8_t *String_p, uint8_t Button);
void Clear_Button(uint8_t Button);
void Clear_Array(uint8_t *Array_p);

float Calc_0(uint8_t *arg1, uint8_t *arg2);
float Calc_Add(uint8_t *arg1, uint8_t *arg2);
float Calc_Sub(uint8_t *arg1, uint8_t *arg2);
float Calc_Mul(uint8_t *arg1, uint8_t *arg2);
float Calc_Div(uint8_t *arg1, uint8_t *arg2);
float Calc_Mod(uint8_t *arg1, uint8_t *arg2);

void Sexy_Draw(void);


// Library functions
extern uint8_t BSP_TP_Init(void);
extern uint8_t BSP_TP_GetDisplayPoint(Coordinate *pDisplay);

#endif /* ASS_02_H_ */
/*
 * i2c.c
 *
 *  Created on: 26 Apr 2017
 *      Author: c3229056
 */



#include "Ass-02.h"

void Sexy_Draw(void)
{
	uint8_t message = 0;
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	BSP_LCD_FillRect(0, 0, 320, 240);

	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);

	message = rand() % 10;

	switch(message){
	case 0:
		BSP_LCD_DisplayStringAt(160, 120, (uint8_t*)"OOH(.)(.)", CENTER_MODE);
		break;
	case 1:
		BSP_LCD_DisplayStringAt(160, 120, (uint8_t*)"AAAHH", CENTER_MODE);
		break;
	case 2:
		BSP_LCD_DisplayStringAt(160, 120, (uint8_t*)"YESSS", CENTER_MODE);
		break;
	case 3:
		BSP_LCD_DisplayStringAt(160, 120, (uint8_t*)"NO", CENTER_MODE);
		break;
	case 4:
		BSP_LCD_DisplayStringAt(160, 120, (uint8_t*)"HARDER", CENTER_MODE);
		break;
	case 5:
		BSP_LCD_DisplayStringAt(160, 120, (uint8_t*)"STOOOOOP :D", CENTER_MODE);
		break;
	case 6:
		BSP_LCD_DisplayStringAt(160, 120, (uint8_t*)"i like it ;)", CENTER_MODE);
		break;
	case 7:
		BSP_LCD_SetFont(&Font20);
		BSP_LCD_DisplayStringAt(160, 120, (uint8_t*)"SQUANCH", CENTER_MODE);
		BSP_LCD_SetFont(&Font24);
		break;
	case 8:
		BSP_LCD_SetFont(&Font20);
		BSP_LCD_DisplayStringAt(160, 120, (uint8_t*)"stroke me nicolas cage", CENTER_MODE);
		BSP_LCD_SetFont(&Font24);
		break;
	case 9:
		BSP_LCD_DisplayStringAt(160, 120, (uint8_t*)"MORE FINGERS", CENTER_MODE);
		break;
	case 10:
		BSP_LCD_DisplayStringAt(160, 120, (uint8_t*)"MORE LUBE", CENTER_MODE);
		break;
	default:
		break;
	}

}
